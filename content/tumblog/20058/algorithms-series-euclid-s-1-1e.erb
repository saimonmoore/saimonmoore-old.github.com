--- 
tumblog_type: regular
title: Algorithms series - Euclid's (1.1E)
author: Saimon Moore
filter: erb
created_at: 2005-08-31 08:30:00 +02:00
layout: tumblog/post
---
<p>A while ago I received a copy of <a href=http://www-cs-faculty.stanford.edu/%7Eknuth/taocp.html>The Art of Computer Programming by Donald E. Knuth</a></p>       <p>I&#8217;ve just started reading volume 1 (Algorithms) and while I&#8217;m working through it I decided I&#8217;d blog on what I&#8217;m learning. So all the posts in the algorithms category are my attempts at understanding the material.</p>       <p>First up&#8230;</p>       <h4>Euclid&#8217;s Algorithm <sup><a href=#fn1>1</a></sup></h4>       <blockquote>         <p>An algorithm to find the greatest common divisor of two numbers m,n.</p>     </blockquote>       <p>Basically:</p>  <ol> <li>Divide m by n</li> <li>If remainder r = 0 ? n is the answer. Done!</li> <li>Reduce m,n i.e. m &lt;- n , n &lt;- r go to step 1.</li> </ol>       <p>Here&#8217;s the algorithm in pseudo code:</p>  <pre><code> 1. r = m % n 2. if r == 0 result = n; return 3. m = n; n = r 4. recurse </code> </pre>   <pre><code> e.g. For m = 10 and n = 6  1. m/n =&amp;gt; r = 4 2. m = 6; n = 4 3. m/n =&amp;gt; r = 2 4. m = 4; n = 2; 5. m/n =&amp;gt; r = 0 6. result = n = 2  i.e the greatest common divisor of 10 and 6 is 2 </code></pre>  <p>...and my initial blind attempt at a ruby implementation.</p>  <p>My idea on this is to write the code as I think it should work without checking/running and post it as is. I&#8217;ll then try it out<sup><a href=#fn2>2</a></sup> and refactor/correct it if necessary in a number of iterations posted as comments. This will enable me to chart my progress of learning ruby.</p>  <p>If you have a more succinct and elegant form of either the pseudo-code or the ruby code or indeed any other programming language I&#8217;d appreciate if you could post it as a comment, thanks.</p>  <pre><code> module Algorithms   class EuclidAlgorithm      #Find the greatest common divisor of m &amp;amp; n     def solve(m,n)       r = m % n       return n if r = 0       m = n; n = r;       self.solve(m,n)     end   end end  euclids_algorithm = Algorithms::EuclidAlgorithm.new puts greatest_common_divisor = #{euclids_algorithm.solve(ARGV[0],ARGV[1])}</code></pre>   <p id=fn1><sup>1</sup> Algorithm 1.1E in Knuth&#8217;s</p>  <p id=fn2><sup>2</sup> At some point in the near future I&#8217;ll add a feature to bligi to allow you to execute the code online.</p><p></p>
