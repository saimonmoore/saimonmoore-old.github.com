--- 
tumblog_type: regular
title: Algorithms series - Euclid's (1.1E)
author: Saimon Moore
filter: haml
created_at: 2005-08-31 08:30:00 +02:00
layout: tumblog/post
---
%p
  A while ago I received a copy of
  %a{ :href => "http://www-cs-faculty.stanford.edu/%7Eknuth/taocp.html" }
    The Art of Computer Programming by Donald E. Knuth
%p
  I’ve just started reading volume 1 (Algorithms) and while I’m working through it I decided I’d blog on what I’m learning. So all the posts in the algorithms category are my attempts at understanding the material.
%p
  First up…
%h4
  Euclid’s Algorithm
  %sup
    %a{ :href => "#fn1" }
      1
%blockquote
  %p
    An algorithm to find the greatest common divisor of two numbers m,n.
%p
  Basically:
%ol
  %li
    Divide m by n
  %li
    If remainder r = 0 ? n is the answer. Done!
  %li
    Reduce m,n i.e. m &lt;- n , n &lt;- r go to step 1.
%p
  Here’s the algorithm in pseudo code:
%pre
  %code
    1. r = m % n 2. if r == 0 result = n; return 3. m = n; n = r 4. recurse
%pre
  %code
    e.g. For m = 10 and n = 6  1. m/n =&amp;gt; r = 4 2. m = 6; n = 4 3. m/n =&amp;gt; r = 2 4. m = 4; n = 2; 5. m/n =&amp;gt; r = 0 6. result = n = 2  i.e the greatest common divisor of 10 and 6 is 2
%p
  \...and my initial blind attempt at a ruby implementation.
%p
  My idea on this is to write the code as I think it should work without checking/running and post it as is. I’ll then try it out
  %sup
    %a{ :href => "#fn2" }
      2
  and refactor/correct it if necessary in a number of iterations posted as comments. This will enable me to chart my progress of learning ruby.
%p
  If you have a more succinct and elegant form of either the pseudo-code or the ruby code or indeed any other programming language I’d appreciate if you could post it as a comment, thanks.
%pre
  %code
    module Algorithms   class EuclidAlgorithm      #Find the greatest common divisor of m &amp;amp; n     def solve(m,n)       r = m % n       return n if r = 0       m = n; n = r;       self.solve(m,n)     end   end end  euclids_algorithm = Algorithms::EuclidAlgorithm.new puts greatest_common_divisor = #{euclids_algorithm.solve(ARGV[0],ARGV[1])}
%p#fn1
  %sup
    1
  Algorithm 1.1E in Knuth’s
%p#fn2
  %sup
    2
  At some point in the near future I’ll add a feature to bligi to allow you to execute the code online.
%p
