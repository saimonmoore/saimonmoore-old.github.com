--- 
tumblog_type: regular
title: Debugging bugs in controller filters
author: Saimon Moore
filter: haml
created_at: 2006-12-14 16:10:00 +01:00
layout: tumblog/post
---
%p
  I just spent the best part of the last two hours trying to trackdown the reason why the filter chain was being halted when accessing a particular controller action.
%p
  Turns out it was due to a ‘bug’ in the “unobtrusive javascript plugin’s”http://www.ujs4rails.com/ behaviour caching filter.
%p
  So here are tips for debugging filter problems, especially if the problematic filter happens to be a proc defined via class_eval :) (These don’t give any clues as to who they are or where they come from).
%ul
  %li
    Use
    %a{ :href => "http://rubyforge.org/projects/ruby-debug/" }
      ruby-debug
    if you aren’t already. (Especially if you’re running ruby 1.8.5.
    %a{ :href => "http://blog.nanorails.com/articles/2006/07/14/a-better-rails-debugger-ruby-debug" }
      Here’s
    a simple tutorial on its use. Just add the debugger keyword to just before the filter call in the BeforeFilterProxy in filters.rb.
  %li
    find the controller instance and print out the list of before_filter’s assigned to the controller. e.g. p c.class.before_filters. Any unexpected filters will show up here and you can then go searching for the filter definition.
  %li
    If you find what you think is the culprit, start another debugging session by using ‘debugger’ right in the filter definition.
%p
  Hope that helps others.
