--- 
tumblog_type: regular
entry_id: 839
title: Debugging bugs in controller filters
author: Saimon Moore
filter: erb
created_at: 2006-12-14 16:10:00 +01:00
layout: tumblog/post
---
<p>I just spent the best part of the last two hours trying to trackdown the reason why the filter chain was being halted when accessing a particular controller action.</p>


	<p>Turns out it was due to a &#8216;bug&#8217; in the &#8220;unobtrusive javascript plugin&#8217;s&#8221;http://www.ujs4rails.com/ behaviour caching filter.</p>


	<p>So here are tips for debugging filter problems, especially if the problematic filter happens to be a proc defined via class_eval :) (These don&#8217;t give any clues as to who they are or where they come from).</p>


	<ul>
	<li>Use <a href="http://rubyforge.org/projects/ruby-debug/">ruby-debug</a> if you aren&#8217;t already. (Especially if you&#8217;re running ruby 1.8.5. <a href="http://blog.nanorails.com/articles/2006/07/14/a-better-rails-debugger-ruby-debug">Here&#8217;s</a> a simple tutorial on its use. Just add the debugger keyword to just before the filter call in the BeforeFilterProxy in filters.rb.</li>
		<li>find the controller instance and print out the list of before_filter&#8217;s assigned to the controller. e.g. p c.class.before_filters. Any unexpected filters will show up here and you can then go searching for the filter definition.</li>
		<li>If you find what you think is the culprit, start another debugging session by using &#8216;debugger&#8217; right in the filter definition.</li>
	</ul>


	<p>Hope that helps others.</p>
