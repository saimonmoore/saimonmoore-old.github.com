--- 
tumblog_type: regular
title: Namespaced View Translations
author: Saimon Moore
filter: haml
created_at: 2007-03-18 13:11:00 +01:00
layout: tumblog/post
---
%p
  ViewTranslations are a very handy way of translating all of your content that isn’t represented by an ActiveRecord model, which is actually quite a lot of content.
%p
  And they work great:
%pre
  %code
    \#In es locale
    
    "translate me".t =&gt; "Traduceme"
    
    "%s, can you translate this?" / 'saimon' =&gt; '¿Saimon, puedes traducir esto?'
    
    "%d translations" / 0 =&gt; "No hay traducciónes"
    "%d translations" / 1 =&gt; "1 traducción"
    "%d translations" / 10 =&gt; "10 traducciónes"
%p
  But imagine you’re using view translations all over the place in your application.
%p
  You use them to translate the static content of your view templates.
  You use them to translate the urls in your links.
  You use them to translate your administration interface.
%p
  After a while the list of translations starts to become a bit too unwieldy.
%p
  Let’s say that you decide to bring in professional translators, who may be decidedly non technical, to translate your site’s content.
%p
  You point them to your new spiffy, paginated, searchable list of words/phrases to be translated and leave them to it.
%p
  The day after your boss phones you up and bellows:
%p
  \- None of the site’s links are working in Slovenian?
%p
  Oops! You start to investigate and find that the stupid translators, went ahead and translated:
%pre
  %code
    'section' =&gt; 'sección' (In Spanish)
%p
  which you were using to translate the url:
%pre
  %code
    http://example.com/section =&gt; http://example.com/seccion
%p
  \- Jeez, don’t translators know you can’t use non-ascii characters in urls?
%p
  \- Umm, well no. They’re translators. That’s your job.
%p
  \- Ah, well, ok I’ll just give them a list of words that are urls and should be translated without accents.
%p
  \- But we use the word ‘section’ in the view as well…
%p
  \- ummm… Let me think….. (time passes)
%p
  \- Also we need the site in Greek which has a lot of strange characters. And come to think of it, this list of urls is getting pretty hard to maintain.
%p
  \-Well, what we need is to be able to have two sorts of translation of the word ‘section’, one for the front end and one for the urls.
%h5
  Using namespaced view translations
%p
  And that’s what
  %em
    %strong
      namespaced
    view translations
  are all about:
%pre
  %code
    \#In es locale
    
    "section".t         =&gt; "sección"  #The default translation with no namespace
    
    "section" &gt;&gt; 'urls' =&gt; "seccion"  #The translation in the 'urls' namespace
    or
    "section".tn(:urls)
    or
    "draw".translate_with_namespace(:urls)
    
    \#The translation in the 'admin' namespace
    "section" &gt;&gt; 'admin' =&gt; "sección"
    
    \# Text interpolation of the translation in the 'admin' namespace
    "%s, can you translate this?".tn(:admin, 'saimon') =&gt; '¿Saimon, puedes traducir esto?'
    
    \#Numeric interpolation of the translation in the 'admin' namespace with a zero value
    "%d translations".tn(:admin, 0) =&gt; "No hay traducciónes"
    
    \#Numeric interpolation of the translation in the 'admin' namespace with non-zero values
    "%d translations".tn(:admin, 1) =&gt; "1 traducción"
    "%d translations".tn(:admin, 10) =&gt; "10 traducciónes"
    
    \#Translation in the 'admin' namespace with a default value if no
    \#translation is available
    "should be translated".tn(:admin,nil, 'untranslated') =&gt; "untranslated"
%h5
  Adding namespaced view translations to the database
%p
  Adding translations with namespaces to the database uses a differently named method but
  is basically the same syntax as Locale.set_translation:
%pre
  %code
    Locale.set('es-ES')
    
    \#No namespace
    Locale.set_translation("section", "sección")
    
    \#With namespace 'urls'
    Locale.set_translation_with_namespace("section", "urls", "seccion")
%p
  or adding translations with plural forms:
%pre
  %code
    Locale.set('es-ES')
    
    \#No namespace
    Locale.set_translation("draw %d times", "dibujar una vez", "dibujar %d veces")
    
    \#With namespace 'lottery'
    Locale.set_translation_with_namespace("draw %d times", "lottery", "seleccionar una vez", "seleccionar %d veces")
%h5
  Filtering translations by namespace
%p
  Once you have view translations categorised under different namespaces, you’ll most likely want to create a friendly interface for your translators so that they don’t translate phrases in the ‘urls’ namespace for example and can concentrate on the translations of the front-end.
%pre
  %code
    url_translations = ViewTranslations.find(:all, :conditions =&gt; {:namespace =&gt; 'urls', :language =&gt; spanish})
%p
  Of course that’s very simplistic and you’d probably want to also distinguish between translations with plural forms, paginate etc but you get the idea.
%h5
  Upgrading your schema
%p
  I needed to change the globalize view_translations table and add an extra varchar column to support namespaced view translations. So in order to use the for-1.2 release with your application, you need to upgrade your schema.
%p
  If you install the
  %strong
    for-1.2
  release via:
%pre
  %code
    script/plugin install http://svn.globalize-rails.org/svn/globalize/branches/for-1.2
%p
  then the plugin’s install hook will automatically update your globalize tables for you  if they already exist.
%p
  If you don’t use the
  %em
    script/plugin install
  method, then you can simply run the following rake task which does the same thing:
%pre
  %code
    rake globalize:upgrade_schema_to_1_dot_2
%p
  If this is the first time you’re installing Globalize then just run the default globalize setup rake task:
%pre
  %code
    rake globalize:setup
%p
  That concludes this article. Watch out for the next
  %a{ :href => "#", :onclick => "alert('Coming soon...'); return false;" }
    article
  in the series where I’ll be talking about
  %strong
    Globalize::SupportedLocales
  , a class that encapsulates the idea of an application’s supported locales.
