--- 
tumblog_type: regular
title: RSpec Story Runner Driven (Browser) Acceptance Testing
author: Saimon Moore
filter: haml
created_at: 2008-01-18 12:30:00 +01:00
layout: tumblog/post
---
%p
  I’ve been using rspec now for quite a while now (thanks to chrissturm) and have been loving it. It feels a lot more natural and intuitive and I’m even getting the hand of learning when/how to mock/stub (though I still have some fixtures lying around).
  I’ve been meaning to learn up on using the new story runner feature and while googling I came upon a
  %a{ :href => "http://www.kerrybuckley.com/2007/11/07/driving-selenium-from-the-rspec-story-runner-rbehave" }
    post
  by Kerry Buckley in which he provides a quick overview of how to setup story runner and also describes how he got story runner to drive selenium acceptance testing.
%p
  Just a quick blurb about what story runner is.
%p
  Story runner basically allows you to write specifications in a plain text file, written in natural language. You basically write a story (paraphrasing
  %a{ :href => "http://dannorth.net/whats-in-a-story" }
    Dan North
  “a description of a requirement and its business benefit, and a set of criteria by which we all agree that it is
  %strong
    done
  ”.)
%p
  For each story you can then write a number of different scenarios (imagine that feature in different situations) and for each scenario you write a set of criteria which determines how that scenario can be completed successfully.
e.g.
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        Story: UI
        %tt
        As a developer                                                  #
        %tt
        I want to go to the uimockups page                              # Description of intent
        %tt
        So that I can implement the mockup                              #
        %tt
        %tt
        Scenario: Going to the /uimockups page when not logged in      &lt;= Scenario Description
        %tt
        Given an anonymous user                                      #
        %tt
        When the user goes to /uimockups                             #
        %tt
        Then the document title should be 'personal'                 # criteria, actions &amp; expectations
        %tt
        And the page should contain the text 'done by Webtypes'      #
        %tt
        And the page should have a field named 'strip-search-input'  #
        %tt
        And the page should have a form named 'strip-search'         #
        %tt
%p
  Given a text file like this, you then write a small ruby script (see /stories/stories/project.rb below) which then takes the text, parses it look for the highlighted keywords. Each
  %strong
    Given
  ,
  %strong
    When
  and
  %strong
    Then
  is a
  %strong
    Step
  \. The
  %strong
    Ands
  are each the same kind as the previous Step.
%p
  Run as is, you’ll get this same story output back to you but each of the lines under
  %strong
    Scenario
  will be marked with
  %strong
    “pending”
  which basically means that the story is yet to be implemented. e.g.
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        saimon@artemis~/dev/projects/myrailsapp$ ruby stories/stories/project.rb
        %tt
        (in /Users/saimon/dev/projects/myrailsapp)
        %tt
        Running 1 scenarios
        %tt
        %tt
        Story: UI
        %tt
        %tt
        As a developer
        %tt
        I want to go to the ui page
        %tt
        So that I can see the mockup
        %tt
        %tt
        Scenario: Going to the /ui page when not logged in
        %tt
        %tt
        Given an anonymous user (PENDING)
        %tt
        %tt
        When the user goes to /ui (PENDING)
        %tt
        %tt
        Then the document title should be 'personal' (PENDING)
        %tt
        And the page should contain the text 'done by Webtypes' (PENDING)
        %tt
        And the page should have a field named 'strip-search-input' (PENDING)
        %tt
        And the page should have a form named 'strip-search' (PENDING)
        %tt
        %tt
        1 scenarios: 0 succeeded, 0 failed, 1 pending
        %tt
        %tt
        Pending Steps:
        %tt
        1) UI (Going to the /ui page when not logged in): Unimplemented step: an anonymous user
        %tt
%p
  To actually get the story to pass, you need to implement each of the
  %strong
    Steps
  in ruby. i.e. Here’s an example of the implementation of the 2nd step:
%ul
  %li
    “When the user goes to /ui (PENDING)”
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        steps_for(
        %span.sy
          \:project
        )
        %span.r
          do
        %tt
        %span.co
          When
        %span.s
          %span.dl
            \&quot;
          %span.k
            the user goes to $path
          %span.dl
            \&quot;
        %span.r
          do
        |path|
        %tt
        get path
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
%p
  As you can see it’s basically parsing the line for a step keyword (in this case ‘When’), and then takes the rest of the line and tries to match it against any of the
  %strong
    When
  steps it knows about. It also goes one step further and allows you to add in variables so that you can extract dynamic criteria directly from the story line ($path) in this case.
%p
  So once, it has been matched, it ends up executing :
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        get
        %span.rx
          %span.dl
            \/
          %span.k
            uimockups
            %tt
%p
  The cool thing about it is that once you’ve implemented a step, it’s just reused every time it’s matched in the story. You can also have a stable set of steps which you use in multiple stories. You could even conceivably build up a library of them to be used in other applications.
%p
  I was at the
  %span.caps
    BCN
  Ruby/Rails group meeting last night and one of the attendants expressed concerns about the brittleness of the syntax. In fact, there’s no problem because story runner will mark any line that it hasn’t been able to match against any of the steps known to it as
  %strong
    pending
  so you can easily determine a syntax problem. And if an exception is raised by anything it has matched then it’ll provide the appropriate stack trace pointing you to the step that caused the exception.
%p
  After watching Pat Maddox’s
  %a{ :href => "http://evang.eli.st/blog/2007/10/8/story-runner-top-to-bottom-screencast" }
    screen-cast
  I’m convinced that using story runner is a good way of starting out your speccing. You can start by writing a story that describes a feature and then drill into it as you implement the steps. Along the way you’ll find you need to implement controllers, models, helpers and views and before you do you can then implement the appropriate specs (only enough to get the functionality in the story passing) which in turn drives the implementation of the object in question.
%p
  Now, finally, I can get to the real reason I wrote this post.
%p
  I’m interested in being able to do my integration tests via story runner and occasionally do the odd browser acceptance testing and as I also had been meaning to play with
  %a{ :href => "http://code.google.com/p/firewatir/" }
    FireWatir
  \&
  %a{ :href => "http://safariwatir.rubyforge.org/" }
    SafariWatir
  I decided to adapt his code to using watir.
%p
  But I added another requirement to the mix. What I really wanted was seamless integration between normal integration tests using plain rspec and browser acceptance testing hen running the same scenarios or even be able to mix and match.
%p
  After a bit I come up with this setup (very similar to Kerry’s original setup):
%p
  Directory Structure:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        +-- lib
        %tt
        | +-- tasks/
        %tt
        |   +-- acceptance.rake
        %tt
        +-- stories/
        %tt
        | +-- all.rb
        %tt
        | +-- helper.rb
        %tt
        | +-- steps/
        %tt
        | | +-- project.rb
        %tt
        | | +-- watir.rb
        %tt
        | +-- stories/
        %tt
        | | +-- project.rb
        %tt
        | | +-- project.txt
        %tt
%p
  Note: As per Kerry’s article I’ve further subdivided the top-level stories directory into stories and steps subdirectories. You don’t have to if you don’t have that many stories to write but I like the organized feeling it provides.
%a{ :href => "http://pastie.caboo.se/private/zevarlg1uucrilfr9pizkq" }
  \/stories/all.rb
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        dir =
        %span.co
          File
        \.dirname(
        %span.pc
          __FILE__
        )
        %tt
        require
        %span.s
          %span.dl
            \&quot;
          %span.il
            %span.dl
              \#{
            dir
            %span.dl
              }
          %span.k
            \/helper
          %span.dl
            \&quot;
        %tt
        %span.co
          Dir
        [
        %span.co
          File
        \.expand_path(
        %span.s
          %span.dl
            \&quot;
          %span.il
            %span.dl
              \#{
            dir
            %span.dl
              }
          %span.k
            \/stories/**/*.rb
          %span.dl
            \&quot;
        )].uniq.each
        %span.r
          do
        |file|
        %tt
        require file
        %tt
        %span.r
          end
        %tt
%p
  %a{ :href => "http://pastie.caboo.se/private/xugk5rwortonhfenapk9w" }
    \/stories/stories/project.txt
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        %span.co
          Story
        \:
        %span.co
          UI
        %tt
        %span.co
          As
        a developer
        %tt
        %span.co
          I
        want to go to the ui page
        %tt
        %span.co
          So
        that
        %span.co
          I
        can see the mockup
        %tt
        %tt
        %span.co
          Scenario
        \:
        %span.co
          Going
        to the
        %span.rx
          %span.dl
            \/
          %span.k
            ui page when not logged in
            %tt
            When the user goes to
          %span.dl
            \/
          %span.mod
            ui
        %tt
        %span.co
          Then
        the document title should be
        %span.s
          %span.dl
            '
          %span.k
            personal
          %span.dl
            '
        %tt
        %span.co
          And
        the page should contain the text
        %span.s
          %span.dl
            '
          %span.k
            done by Webtypes
          %span.dl
            '
        %tt
        %span.co
          And
        the page should have a field named
        %span.s
          %span.dl
            '
          %span.k
            strip-search-input
          %span.dl
            '
        %tt
        %span.co
          And
        the page should have a form named
        %span.s
          %span.dl
            '
          %span.k
            strip-search
          %span.dl
            '
        %tt
%p
  %a{ :href => "http://pastie.caboo.se/private/z2ixmrkt0fxmrofmpuj8uw" }
    \/stories/stories/project.rb
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        %span.c
          \#Call me with: [BROWSER=firefox|safari|ie] ruby stories/stories/project.rb
        %tt
        require
        %span.co
          File
        \.join(
        %span.co
          File
        \.dirname(
        %span.pc
          __FILE__
        ),
        %span.s
          %span.dl
            \&quot;
          %span.k
            \../helper
          %span.dl
            \&quot;
        )
        %tt
        run_story_with_steps_for (browser ? [
        %span.sy
          \:watir_project
        ,
        %span.sy
          \:project
        ] : [
        %span.sy
          \:project
        ])
        %tt
%p
  %a{ :href => "http://pastie.caboo.se/private/affqfxbpiwgd0hlsdnotg" }
    \/stories/steps/project.rb
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
        27
        %tt
        28
        %tt
        29
        %tt
        %strong
          30
        %tt
        31
        %tt
        32
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        steps_for(
        %span.sy
          \:project
        )
        %span.r
          do
        %tt
        %span.co
          Given
        %span.s
          %span.dl
            \&quot;
          %span.k
            a test user
          %span.dl
            \&quot;
        %span.r
          do
        %tt
        %span.co
          User
        \.delete_all
        %tt
        %span.co
          User
        \.create!(
        %span.sy
          \:name
        \=&gt;
        %span.s
          %span.dl
            '
          %span.k
            test
          %span.dl
            '
        ,
        %span.sy
          \:openid_url
        \=&gt;
        %span.s
          %span.dl
            '
          %span.k
            http://dummy.openid/
          %span.dl
            '
        ,
        %tt
        %span.sy
          \:email
        \=&gt;
        %span.s
          %span.dl
            '
          %span.k
            test@example.com
          %span.dl
            '
        )
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          When
        %span.s
          %span.dl
            \&quot;
          %span.k
            the user goes to $path
          %span.dl
            \&quot;
        %span.r
          do
        |path|
        %tt
        get path
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the document title should be '$title'
          %span.dl
            \&quot;
        %span.r
          do
        |title|
        %tt
        response.should have_tag(
        %span.s
          %span.dl
            '
          %span.k
            title
          %span.dl
            '
        , title)
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should contain the text '$text'
          %span.dl
            \&quot;
        %span.r
          do
        |text|
        %tt
        response.should have_text(
        %span.rx
          %span.dl
            \/
          %span.il
            %span.dl
              \#{
            text
            %span.dl
              }
          %span.dl
            \/
        )
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a field named '$field'
          %span.dl
            \&quot;
        %span.r
          do
        |field|
        %tt
        response.should have_tag(
        %span.s
          %span.dl
            \&quot;
          %span.k
            input[type=text][id=?]
          %span.dl
            \&quot;
        , field)
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a form named '$form'
          %span.dl
            \&quot;
        %span.r
          do
        |form|
        %tt
        response.should have_tag(
        %span.s
          %span.dl
            \&quot;
          %span.k
            form[id=?]
          %span.dl
            \&quot;
        , form)
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a submit button named '$name', with the label '$label'
          %span.dl
            \&quot;
        %span.r
          do
        |name, label|
        %tt
        response.should have_tag(
        %span.s
          %span.dl
            \&quot;
          %span.k
            input[type=submit][id=?][value=?]
          %span.dl
            \&quot;
        , name,label)
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
%p
  %a{ :href => "http://pastie.caboo.se/private/rmhcscvf6od8angsb6z9aq" }
    \/stories/steps/watir_project.rb
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
        27
        %tt
        28
        %tt
        29
        %tt
        %strong
          30
        %tt
        31
        %tt
        32
        %tt
        33
        %tt
        34
        %tt
        %strong
          35
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        steps_for(
        %span.sy
          \:watir_project
        )
        %span.r
          do
        %tt
        %span.co
          When
        %span.s
          %span.dl
            \&quot;
          %span.k
            the user goes to $path
          %span.dl
            \&quot;
        %span.r
          do
        |path|
        %tt
        browser.goto
        %span.s
          %span.dl
            \&quot;
          %span.k
            http://localhost
          %span.il
            %span.dl
              \#{
            path
            %span.dl
              }
          %span.dl
            \&quot;
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          When
        %span.s
          %span.dl
            \&quot;
          %span.k
            the user types '$text' into the $field field
          %span.dl
            \&quot;
        %span.r
          do
        |text, field|
        %tt
        browser.text_field(
        %span.sy
          \:name
        ,field).set(text)
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          When
        %span.s
          %span.dl
            \&quot;
          %span.k
            the user clicks the $button button
          %span.dl
            \&quot;
        %span.r
          do
        |button|
        %tt
        browser.button(
        %span.sy
          \:value
        , button).click
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the document title should be '$title'
          %span.dl
            \&quot;
        %span.r
          do
        |title|
        %tt
        browser.title.should == title
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should contain the text '$text'
          %span.dl
            \&quot;
        %span.r
          do
        |text|
        %tt
        browser.text.include?(text).should be_true
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a field named '$field'
          %span.dl
            \&quot;
        %span.r
          do
        |field|
        %tt
        (browser.text_field(
        %span.sy
          \:name
        , field).exists? || browser.text_field(
        %span.sy
          \:id
        , field).exists?).should be_true
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a form named '$form'
          %span.dl
            \&quot;
        %span.r
          do
        |form|
        %tt
        (browser.form(
        %span.sy
          \:name
        , form).exists? || browser.form(
        %span.sy
          \:id
        , form).exists?).should be_true
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          Then
        %span.s
          %span.dl
            \&quot;
          %span.k
            the page should have a submit button named '$name', with the label '$label'
          %span.dl
            \&quot;
        %span.r
          do
        |name, label|
        %tt
        tf = (browser.text_field(
        %span.sy
          \:name
        , field) || browser.text_field(
        %span.sy
          \:id
        , field)).exists?().should be_true
        %tt
        tf.value.should == label
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
%p
  %a{ :href => "http://pastie.caboo.se/private/gjdg9871z6skk76pomchvg" }
    \/stories/helper.rb
  \:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
        27
        %tt
        28
        %tt
        29
        %tt
        %strong
          30
        %tt
        31
        %tt
        32
        %tt
        33
        %tt
        34
        %tt
        %strong
          35
        %tt
        36
        %tt
        37
        %tt
        38
        %tt
        39
        %tt
        %strong
          40
        %tt
        41
        %tt
        42
        %tt
        43
        %tt
        44
        %tt
        %strong
          45
        %tt
        46
        %tt
        47
        %tt
        48
        %tt
        49
        %tt
        %strong
          50
        %tt
        51
        %tt
        52
        %tt
        53
        %tt
        54
        %tt
        %strong
          55
        %tt
        56
        %tt
        57
        %tt
        58
        %tt
        59
        %tt
        %strong
          60
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        %span.co
          ENV
        [
        %span.s
          %span.dl
            \&quot;
          %span.k
            RAILS_ENV
          %span.dl
            \&quot;
        ] =
        %span.s
          %span.dl
            \&quot;
          %span.k
            test
          %span.dl
            \&quot;
        %tt
        require
        %span.co
          File
        \.expand_path(
        %span.co
          File
        \.dirname(
        %span.pc
          __FILE__
        ) +
        %span.s
          %span.dl
            \&quot;
          %span.k
            \/../config/environment
          %span.dl
            \&quot;
        )
        %tt
        require
        %span.s
          %span.dl
            '
          %span.k
            spec/rails/story_adapter
          %span.dl
            '
        %tt
        %tt
        %span.c
          \# watir gem
        %tt
        require
        %span.s
          %span.dl
            '
          %span.k
            firewatir
          %span.dl
            '
        %span.r
          if
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] &amp;&amp;
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] ==
        %span.s
          %span.dl
            '
          %span.k
            firefox
          %span.dl
            '
        %tt
        require
        %span.s
          %span.dl
            '
          %span.k
            safariwatir
          %span.dl
            '
        %span.r
          if
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] &amp;&amp;
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] ==
        %span.s
          %span.dl
            '
          %span.k
            safari
          %span.dl
            '
        %tt
        %tt
        %span.r
          def
        %span.fu
          start_ff
        %tt
        %span.co
          FireWatir
        \::
        %span.co
          Firefox
        \.new
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          def
        %span.fu
          start_safari
        %tt
        safari =
        %span.co
          Watir
        \::
        %span.co
          Safari
        \.new
        %tt
        %span.r
          end
        %tt
        %tt
        %tt
        %span.c
          \#Require steps in steps dir
        %tt
        %span.co
          Dir
        [
        %span.co
          File
        \.dirname(
        %span.pc
          __FILE__
        ) +
        %span.s
          %span.dl
            \&quot;
          %span.k
            \/steps/*.rb
          %span.dl
            \&quot;
        ].uniq.each { |file| require file }
        %tt
        %tt
        %span.c
          \#Require appropriate watir browser object
        %tt
        %span.r
          if
        \!
        %span.gv
          $ff
        \&amp;&amp;
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] ==
        %span.s
          %span.dl
            '
          %span.k
            firefox
          %span.dl
            '
        %tt
        %span.gv
          $ff
        \= start_ff_with_logger
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          if
        \!
        %span.gv
          $sf
        \&amp;&amp;
        %span.co
          ENV
        [
        %span.s
          %span.dl
            '
          %span.k
            BROWSER
          %span.dl
            '
        ] ==
        %span.s
          %span.dl
            '
          %span.k
            safari
          %span.dl
            '
        %tt
        %span.gv
          $sf
        \= start_safari_with_logger
        %tt
        %span.r
          end
        %tt
        %tt
        %span.c
          \#Choose which browser to use in steps
        %tt
        %span.r
          def
        %span.fu
          browser
        %tt
        %span.gv
          $ff
        ||
        %span.gv
          $sf
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          def
        %span.fu
          run_story_with_steps_for
        *steps
        %tt
        with_steps_for *(steps.flatten)
        %span.r
          do
        %tt
        %span.c
          \# Pull the filename of the caller out of the stack. Must be a better way.
        %tt
        run caller[
        %span.i
          3
        ].sub(
        %span.rx
          %span.dl
            \/
          %span.ch
            \\.
          %span.k
            rb:.*
          %span.dl
            \/
        ,
        %span.s
          %span.dl
            '
          %span.k
            \.txt
          %span.dl
            '
        ),
        %span.sy
          \:type
        \=&gt;
        %span.co
          RailsStory
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %tt
        %span.c
          \# By default, RSpec adds an ActiveRecordSafetyListener to the story runner.
        %tt
        %span.c
          \# This rolls back database changes between scenarios, which is great if your calling your code directly,
        %tt
        %span.c
          \# but obviously means that if you write to the database, the server that Selenium's talking to can't see them. There's probably a cleaner way of disabling it.
        %tt
        %span.r
          class
        %span.cl
          Spec::Story::Runner::ScenarioRunner
        %tt
        %span.r
          def
        %span.fu
          initialize
        %tt
        %span.iv
          @listeners
        \= []
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          module
        \::
        %span.co
          ActionController
        %span.c
          \#:nodoc:
        %tt
        %span.r
          module
        %span.cl
          TestProcess
        %tt
        %span.c
          \# Work around Rails ticket http://dev.rubyonrails.org/ticket/1937
        %tt
        %span.c
          \# Helps to remove annoying html parser warnings
        %tt
        %span.r
          def
        %span.fu
          html_document
        %tt
        %span.iv
          @html_document
        ||=
        %span.co
          HTML
        \::
        %span.co
          Document
        \.new(
        %span.iv
          @response
        \.body,
        %span.pc
          true
        ,
        %span.pc
          true
        )
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
%p
  So once you’ve got all that setup, you can then run:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        saimon@artemis~/dev/projects/myrailsapp$
        %tt
        ruby stories/stories/project.rb
        %tt
%p
  to execute the project story using basic rspec. It provides the following output:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        Running 1 scenarios
        %tt
        %tt
        Story: UI
        %tt
        %tt
        As a developer
        %tt
        I want to go to the ui page
        %tt
        So that I can see the mockup
        %tt
        %tt
        Scenario: Going to the /ui page when not logged in
        %tt
        %tt
        Given an anonymous user
        %tt
        %tt
        When the user goes to /ui
        %tt
        %tt
        Then the document title should be 'personal'
        %tt
        And the page should contain the text 'done by Webtypes'
        %tt
        And the page should have a field named 'strip-search-input'
        %tt
        And the page should have a form named 'strip-search'
        %tt
        %tt
        1 scenarios: 1 succeeded, 0 failed, 0 pending
        %tt
        %tt
%p
  Woot! You can know just take that project.txt and send it to a client, a fellow developer, a project mailing list etc…
%p
  But, let’s go the extra step and run that same scenario against Firefox (go to
  %a{ :href => "http://code.google.com/p/firewatir/wiki/FireWatir_Installation" }
    FireWatir
  and follow the instructions. They’re pretty simple.)
Start firefox with -jssh
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        saimon@artemis~/dev/projects/myrailsapp$
        %tt
        \/Applications/Firefox.app/Contents/MacOS/firefox -jssh
        %tt
        %tt
        run the story with the BROWSER environment variable:
        %tt
        %tt
        saimon@artemis~/dev/projects/myrailsapp$
        %tt
        BROWSER=firefox ruby stories/stories/project.rb
        %tt
%p
  and watch how FF is magically commanded to go through your stories scenarios. In the end it’s run the story against FF and provides the same passing output as the previous run.
%p
  One further step is to write a few rake commands to simplify running all your stories, with or without browser acceptance testing.
%p
  Add this file:
%p
  %a{ :href => "http://pastie.caboo.se/private/u1d8uc3llb95ttcid2cgw" }
    \/lib/tasks/acceptance.rake
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
        27
        %tt
        28
        %tt
        29
        %tt
        %strong
          30
        %tt
        31
        %tt
        32
        %tt
        33
        %tt
        34
        %tt
        %strong
          35
        %tt
        36
        %tt
        37
        %tt
        38
        %tt
        39
        %tt
        %strong
          40
        %tt
        41
        %tt
        42
        %tt
        43
        %tt
        44
        %tt
        %strong
          45
        %tt
        46
        %tt
        47
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        desc
        %span.s
          %span.dl
            \&quot;
          %span.k
            Run the acceptance tests, starting/stopping the test server.
          %span.dl
            \&quot;
        %tt
        task
        %span.sy
          \:acceptance_with_browser
        \=&gt; [
        %span.s
          %span.dl
            '
          %span.k
            acceptance:server:start
          %span.dl
            '
        ]
        %span.r
          do
        %tt
        %span.r
          begin
        %tt
        %span.co
          Rake
        \::
        %span.co
          Task
        [
        %span.s
          %span.dl
            '
          %span.k
            acceptance:run
          %span.dl
            '
        ].invoke
        %tt
        %span.r
          ensure
        %tt
        %span.co
          Rake
        \::
        %span.co
          Task
        [
        %span.s
          %span.dl
            '
          %span.k
            acceptance:server:stop
          %span.dl
            '
        ].invoke
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %span.s
          %span.dl
            \%w(
          %span.k
            firefox safari
          %span.dl
            )
        \.each
        %span.r
          do
        |browser|
        %tt
        %span.co
          Object
        \.class_eval
        %span.s
          %span.dl
            \&lt;&lt;-EOS
        %span.s
          %span.k
            %tt
            desc &quot;Run the acceptance tests using the
          %span.il
            %span.dl
              \#{
            browser
            %span.dl
              }
          %span.k
            browser.&quot;
            %tt
            task :acceptance_with_
          %span.il
            %span.dl
              \#{
            browser
            %span.dl
              }
          %span.k
            do
            %tt
            $browser = '
          %span.il
            %span.dl
              \#{
            browser
            %span.dl
              }
          %span.k
            '
            %tt
            Rake::Task['acceptance_with_browser'].invoke
            %tt
            end
          %span.dl
            %tt
            EOS
        %tt
        %span.r
          end
        %tt
        %tt
        namespace
        %span.sy
          \:acceptance
        %span.r
          do
        %tt
        desc
        %span.s
          %span.dl
            \&quot;
          %span.k
            Run the acceptance tests.
          %span.dl
            \&quot;
        %tt
        task
        %span.sy
          \:run
        %span.r
          do
        %tt
        system
        %span.s
          %span.dl
            \&quot;
          %span.il
            %span.dl
              \#{
            %span.gv
              $browser
            ?
            %span.s
              %span.dl
                \&quot;
              %span.k
                BROWSER='
              %span.il
                %span.dl
                  \#{
                %span.gv
                  $browser
                %span.dl
                  }
              %span.k
                '
              %span.dl
                \&quot;
            \:
            %span.s
              %span.dl
                '
              %span.dl
                '
            %span.dl
              }
          %span.k
            ruby stories/all.rb
          %span.dl
            \&quot;
        %tt
        %span.r
          end
        %tt
        %tt
        namespace
        %span.sy
          \:server
        %span.r
          do
        %tt
        desc
        %span.s
          %span.dl
            \&quot;
          %span.k
            Start the mongrel server
          %span.dl
            \&quot;
        %tt
        task
        %span.sy
          \:start
        %span.r
          do
        %tt
        system
        %span.s
          %span.dl
            '
          %span.k
            script/server -e test -d
          %span.dl
            '
        %tt
        sleep
        %span.i
          5
        %tt
        %span.r
          end
        %tt
        %tt
        desc
        %span.s
          %span.dl
            \&quot;
          %span.k
            Stop the mongrel server
          %span.dl
            \&quot;
        %tt
        task
        %span.sy
          \:stop
        %span.r
          do
        %tt
        %span.r
          if
        %span.co
          File
        \.exist?
        %span.co
          MONGREL_SERVER_PID_FILE
        %tt
        pid =
        %span.co
          File
        \.read(
        %span.co
          MONGREL_SERVER_PID_FILE
        ).to_i
        %tt
        %span.co
          Process
        \.kill
        %span.s
          %span.dl
            '
          %span.k
            TERM
          %span.dl
            '
        , pid
        %tt
        %span.co
          FileUtils
        \.rm
        %span.co
          MONGREL_SERVER_PID_FILE
        %tt
        %span.r
          else
        %tt
        puts
        %span.s
          %span.dl
            \&quot;
          %span.il
            %span.dl
              \#{
            %span.co
              MONGREL_SERVER_PID_FILE
            %span.dl
              }
          %span.k
            not found
          %span.dl
            \&quot;
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %tt
        %span.co
          MONGREL_SERVER_PID_FILE
        \=
        %span.s
          %span.dl
            '
          %span.k
            tmp/pids/mongrel.pid
          %span.dl
            '
        %tt
        %tt
%p
  Then you can do:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        saimon@artemis~/dev/projects/myrailsapp$
        %tt
        rake acceptance:run
        %tt
        %tt
        or
        %tt
        %tt
        rake acceptance_with_firefox
        %tt
        %tt
        or
        %tt
        %tt
        rake acceptance_with_safari
        %tt
%p
  I thoroughly enjoyed getting that setup and though I only plan on writing browser specs for specific issues/features it’s nice to have the choice and the geek factor is way up high :)
%p
  Have fun speccing…
