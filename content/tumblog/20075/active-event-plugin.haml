--- 
tumblog_type: regular
title: "ActiveEvent: My latest plugin"
author: Saimon Moore
filter: haml
created_at: 2007-05-17 09:58:00 +02:00
layout: tumblog/post
---
%p
  For one of my current applications I had a need for an event handling system.
%p
  I needed to able to dispatch events during the application’s lifecycle, and have observers respond to them appropriately. I also needed to keep an audit trail of the user’s interaction with the application.
%p
  Rails has the basis of an event handling system for ActiveRecord models in the form of  it’s callbacks that ActiveRecord::Observer’s can react upon. However, this is limited to a set amount of callbacks and doesn’t support a wide variety of events.
%p
  So I wrote ActiveEvent to do this.
%p
  I actually wrote this code about a year ago for Rails 1.0 when I was developing
  %a{ :href => "/portfolio" }
    ocium.com
  but I’ve since needed this for one of
  %a{ :href => "http://webtypes.com" }
    our
  current internal applications and I’ve refactored and packaged into a plugin that others can use.
%p
  “What do I use this for and how do I use it?” – A very good question.
%p
  Use it for:
%ol
  %li
    Creating an synchronous order event handling system with events like OrderPlacedEvent, OrderShippedEvent, OrderRefusedEvent. Have observers that react to each event in a distinct and customised way. Perhaps, you want to send an email informing the client of the fact that their order has been shipped (very simple use case). Your imagination is the limit.
%p
  (NOTE: ActiveEvent in combination with the ActsAsStatemachine plugin makes for a very powerful way of controlling your application’s lifecycle.)
%ol
  %li
    Want to be able to easily track a users actions within your application? This plugin makes this a piece of cake.
%p
  Let’s see it in action
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
        %strong
          5
        %tt
        6
        %tt
        7
        %tt
        8
        %tt
        9
        %tt
        %strong
          10
        %tt
        11
        %tt
        12
        %tt
        13
        %tt
        14
        %tt
        %strong
          15
        %tt
        16
        %tt
        17
        %tt
        18
        %tt
        19
        %tt
        %strong
          20
        %tt
        21
        %tt
        22
        %tt
        23
        %tt
        24
        %tt
        %strong
          25
        %tt
        26
        %tt
        27
        %tt
        28
        %tt
        29
        %tt
        %strong
          30
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        %span.r
          class
        %span.cl
          Order
        \&lt;
        %span.co
          ActiveRecord
        \::
        %span.co
          Base
        %tt
        %tt
        has_active_events
        %span.c
          \#Assumes an existing User model class but is customizable
        %tt
        %tt
        %span.r
          def
        %span.fu
          place_order
        (msg)
        %tt
        send_event(
        %span.co
          ActiveEvent
        \::
        %span.co
          OrderPlacedEvent
        \.new(
        %span.pc
          self
        ,
        %span.pc
          nil
        , msg)
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          class
        %span.cl
          OrderObserver
        \&lt;
        %span.co
          ActiveRecord
        \::
        %span.co
          Observer
        %tt
        %tt
        %span.r
          def
        %span.fu
          after_save
        %tt
        %span.c
          \#do something here
        %tt
        %span.r
          end
        %tt
        %tt
        %span.r
          def
        %span.fu
          on_event
        (order, event)
        %tt
        %span.c
          \#react to the event
        %tt
        %span.c
          \#e.g.
        %tt
        %span.r
          case
        %span.co
          Event
        %tt
        %span.r
          when
        %span.co
          OrderShippedEvent
        %tt
        %span.co
          OrderNotifier
        \.deliver_order_shipped(order, event)
        %tt
        %span.r
          when
        %span.co
          OrderCancelledEvent
        %tt
        order.cancel!
        %span.c
          \#Change model state via ActsAsStatemachine plugin
        %tt
        %span.r
          end
        %tt
        %tt
        %span.c
          \#Add the event to the audit system
        %tt
        %span.co
          ActiveEvent
        \::
        %span.co
          AuditTrail
        \.add_event(event)
        %tt
        %span.r
          end
        %tt
        %span.r
          end
        %tt
%p
  Get it installed:
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        script/plugin install svn://rubyforge.org/var/svn/sidirodromos/plugins/active_event/trunk
        %tt
        %tt
        script/generate active_event migrations
        %tt
%p
  Change coming soon:
%ul
  %li
    Add an option to has_active_events method to allow transparent event tracking. i.e. In above example, you’d no longer need to add the
    %em
      ActiveEvent::AuditTrail.add_event(event)
    call.
%p
  e.g.
%table.CodeRay
  %tr
    %td.line_numbers{ :title => "click to toggle", :onclick => "with (this.firstChild.style) { display = (display == '') ? 'none' : '' }" }
      %pre
        1
        %tt
        2
        %tt
        3
        %tt
        4
        %tt
    %td.code
      %pre{ :ondblclick => "with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }" }
        %tt
        %span.r
          class
        %span.cl
          Order
        \&lt;
        %span.co
          ActiveRecord
        \::
        %span.co
          Base
        %tt
        has_active_events
        %span.sy
          \:audit
        \=&gt;
        %span.pc
          true
        %tt
        %span.r
          end
        %tt
%ul
  %li
    Make the auditing system completely optional (No need to create its tables unless you want it)
  %li
    Add asynchronous notifications support  via the backgroundrb plugin
%p
  Actually I thought these todo’s were so important I added them in already :)
%p
  Have a look at the plugins
  %span.caps
    README
  for details and examples. Then have a look at it’s tests.
%p
  P.S. I’m thinking about adding support for the
  %a{ :href => "http://en.wikipedia.org/wiki/Memento_pattern" }
    Memento pattern
  to provide granularized undo possibilities…
