--- 
tumblog_type: regular
title: My trusty editor to the rescue
author: Saimon Moore
filter: haml
created_at: 2005-12-17 07:47:00 +01:00
layout: tumblog/post
---
%p
  I was watching the latest rails
  %a{ :href => "http://www.rubyonrails.com/screencasts" }
    videos
  and in particular the one about using migrations and was impressed at how David was using abbreviations to autogenerate the migrations commands.
%p
  %span.caps
    %span.caps
      DHH
  was using the
  %a{ :href => "http://www.macromates.com" }
    Textmate
  editor which is only available on MacOX. What was impressive about the abbrevs he was using was that they also allowed you to have multiple variables with
  %span.caps
    DEFAULT
  values and you could switch between the different variables using the
  %span.caps
    %span.caps
      TAB
  key. Textmate calls these snippets and they are basically the same feature as eclipse’s templates. This all made for a really cool overall impression of the textmate editor.
%p
  My preferred
  %a{ :href => "http://www.jedit.org" }
    editor
  (No mac unfortunately) has had abbreviations as far as I can remember but they’re quite basic. You define the text you want to appear before the cursor and the text after the cursor and the
  %span.caps
    %span.caps
      SPACE
  key expands the abbreviation.
%p
  So I decided to investigate wether there was a non-mac version of textmate out there and luckily enough came upon this
  %a{ :href => "http://macromates.com/blog/archives/2005/11/07/windowslinux-alternative/" }
    post
  \. From the post it’s apparent, that there aren’t any non-mac versions but it was basically being used for people to compare their editors. Then I happened to chance upon one chap’s post who was talking about
  %a{ :href => "http://plugins.jedit.org/plugins/?SuperAbbrevs" }
    this
  jedit plugin and how it provided the same functionality as textmate snippets and eclipse templates (In fact he provided his own hacked version of the plugin to allow expansion of the abbrev while allowing the normal
  %span.caps
    %span.caps
      TAB
  functionality as well.
%p
  I quickly downloaded the plugin and after about 10 minutes I had replicated David’s migration abbrevs and was adding more and more abbrevs for basic ruby and common rails idioms.
%p
  I must admit I’ve been underusing jEdit’s abbreviations features but you really do cut a lot of corners with them and you save a hell of a lot of time with them. This new plugin really makes life a
  %strong
    lot
  easier and coding rails is now even more of a pleasure as a result.
%p
  But I started thinking more in depth about this and it struck me that the automation that people like David apply in their editors/ides is just an extension of the fact that their whole mindset and approach to coding is one of complete (or as far as possible) automation and just boils down to the
  %span.caps
    %span.caps
      DRY
  principle.
%p
  This just showed me that I was yet to have
  %span.caps
    %span.caps
      DRY
  comletely under my skin but that now it’s beginning to sink in.
%p
  Anyway all you jEdit users out there don’t waste any more time using the basic abbrevs system, get your abbreviations ported to the SuperAbbrevs plugin and start flying.
%ul
  %li
    P.S.1 One minor gripe with the plugin is that the abbrevs are stored in binary format which doesn’t make it easy to port over your current abbreviations but saying that since you have to edit each one anyway this is not major.
%ul
  %li
    P.S.2 In fact this spurred a flurry of activity in which I also set up jedit as a non-visible background server to allow quick editing of files from the command-line using the -reuseview feature. I’m amazed these things take so long for me to realise sometimes.
%p
